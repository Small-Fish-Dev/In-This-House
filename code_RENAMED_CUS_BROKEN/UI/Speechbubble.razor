@using Sandbox.UI;

@namespace BrickJam
@inherits WorldPanel

<root>
	<panel class="border">
		<label class="label">@Text.Substring( 0, textIndex )</label>
	</panel>
</root>

@code {
	private static Dictionary<Player, Speechbubble> all = new();

	public const float Delay = 0.05f;
	public const float Time = 6f;

	public string Text { get; set; }
	public Player From { get; set; }

	private int textIndex = 0;
	private TimeUntil nextIndex = Delay;
	private TimeSince sinceCreation;
	private TimeSince? finished = null;

	protected Speechbubble( string text, Player player )
	{
		if ( all.TryGetValue( player, out var bubble ) )
		{
			bubble.Delete();
			all.Remove( player );
		}

		Text = text;
		From = player;

		var size = new Vector2( 1000f, 800f );
		WorldScale = 2f;
		PanelBounds = new Rect( -size.x / 2f, -size.y, size.x, size.y );

		all.Add( player, this );
	}

	public override void Tick()
	{
		// Don't draw if sender is viewing from first person.
		Style.Opacity = From == Game.LocalPawn && Camera.FirstPersonViewer == Game.LocalPawn 
			? 0f 
			: 1f;

		// Check if attached player is valid.
		if ( From == null || !From.IsValid )
		{
			if ( !IsDeleting )
				Delete();

			return;
		}

		// Check if displayed for long enough.
		if ( finished != null && finished > Time )
		{
			if ( !IsDeleting )
				Delete();

			return;
		}

		// Character adding.
		if ( textIndex < Text.Length )
		{
			if ( nextIndex )
			{
				nextIndex = Delay;
				textIndex++;
			}
		}
		else if ( finished == null )
			finished = 0f;

		// Set position and rotation.
		Position = From.EyePosition + Vector3.Up * (15f + MathF.Abs( 2f * MathF.Sin( sinceCreation ) ));

		var rotation = Rotation.LookAt( Camera.Position - Position );
		var targetRoll = 5f * MathF.Sin( sinceCreation * 1.5f );
		Rotation = Rotation.From( 0, rotation.Yaw(), MathF.Floor( targetRoll * 2f + 0.5f ) / 2f );
	}

	/// <summary>
	/// Create a SpeechBubble from a player.
	/// </summary>
	/// <param name="text"></param>
	/// <param name="from"></param>
	public static void Create( string text, Player from )
		=> new Speechbubble( text, from );

	protected override int BuildHash()
	{
		return HashCode.Combine( textIndex );
	}
}

<style>
	Speechbubble {
		position: absolute;
		background-color: rgba(white, 0);
		justify-content: center;
		flex-wrap: wrap-reverse;
		transition: transform 1s ease-in-out;
		transform-origin: bottom;

		.border {
			background-color: rgba(white, 0);
			border-image: url(ui/speech.png) fill;
			transform: scale(1);
			padding: 5px;
			padding-bottom: 0px;
			flex-grow: 0;
			color: white;

			.label {
				bottom: 15px;
				right: 15px;
				margin-right: -20px;
				margin-bottom: -15px;
				font-size: 32px;
				font-family: "alagard";
				font-weight: bold;
				text-shadow: 2px 2px 0px black;
			}
		}

		&:intro {
			transform: scale(0);
		}

		&:outro {
			transform: scale(0);
		}
	}
</style>
