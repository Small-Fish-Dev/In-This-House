@using Sandbox.UI;

@namespace ITH.UI
@inherits Panel

<root style="background: conic-gradient(white 0%, white @ProgressWhitePercent, transparent @ProgressTransparentPercent)">
</root>

<style>
	RadialProgress {
		width: @( Radius );
		height: @( Radius );
		aspect-ratio: 1;
		border-radius: 50%;
	}
</style>

@if ( InnerDiameterPercent != 0 )
{
	<style>
		RadialProgress {
			mask-image: radial-gradient(black 0%, black @InnerRadiusBlackPercent, white @InnerRadiusWhitePercent, white 100%);
		}
	</style>
}

@code {

	public Length Radius { get; set; } = Length.Pixels( 128 ) ?? Length.Auto;

	/// <summary>
	/// From 0% to 100%
	/// </summary>
	public float InnerDiameterPercent { get; set; } = 0;

	/// <summary>
	/// A function that must return a value in range [0; 1]
	/// </summary>
	public Func<float> Progress { get; set; }
	public float Value { get; set; }

	private float ProgressClamped => (Progress?.Invoke() ?? Value).Clamp( 0, 1 );

	private string ProgressWhitePercent => $"{ProgressClamped * 100}%";
	private string ProgressTransparentPercent => $"{ProgressClamped * 100 + 0.01f}%";
	private string InnerRadiusBlackPercent => $"{InnerDiameterPercent / 2}%";
	private string InnerRadiusWhitePercent => $"{InnerDiameterPercent / 2 + 0.01f}%";

	protected override int BuildHash() => HashCode.Combine( ProgressClamped );

}
