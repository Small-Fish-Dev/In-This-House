@using Sandbox;
@using Sandbox.UI;

@namespace BrickJam.UI
@inherits Panel

<root>
	<div class="background" style="background-image: url(@getBorder());">
		<label class="title">INVENTORY</label>
		<div class="items">
			@{
				if ( player?.Inventory?.Loots == null )
					return;

				foreach ( var pair in player?.Inventory?.Loots )
				{
					if ( !pair.Key.HasValue )
						continue;

					var item = pair.Key.Value;
					var amount = pair.Value;

					<div class="item"
					@onmouseover=@(() => { 
						tooltipData = pair; 
					})
				 	@onmouseout=@(() => { 
						 previousTooltip = tooltipData; 
						 tooltipData = null; 
					})>
						<looticon class="icon" prefab="@(item.Prefab.ResourceName)" />
						<label class="amount">x@(amount)</label>
					</div>
				}
			}
		</div>
	</div>

	<div class="tooltip @(tooltipData != null || holdPanel != null ? "visible" : "")">
		@{
			var targetTooltip = tooltipData ?? previousTooltip;
			if ( targetTooltip != null )
			{
				var data = targetTooltip.Value;
				var prefab = data.Key.Value.Prefab;
				var rarity = data.Key.Value.Rarity;
				var price = (int)(prefab.MonetaryValue * Loot.RarityMap[rarity]);

				<div class="container">
					<div style="flex-direction: row;"> 
						<span style="margin-right: 10px;">@($"{rarity} {prefab.Name}")</span>
						<span style="margin-right: 10px;">x@(data.Value)</span>
					</div>
					<div style="flex-direction: row; margin-top: 5px;"> 
						<span class="currency">$</span><span>@($"{(price * data.Value):n0}")</span>

						@if( data.Value > 1 )
						{
							<span style="color: rgba(215, 215, 215, 1); margin-left: 10px; padding-right: 5px;">/</span>
							<span class="currency">$</span><span style="color: rgba(215, 215, 215, 1);">@($"{price:n0}") ea.</span>
						}
					</div>

					@if( prefab.Description != null && prefab.Description != string.Empty )
					{
						<div class="description">@(prefab.Description)</div>
					}
				</div>

				<looticon class="icon" prefab="@(prefab.ResourceName)" />
			}
		}
	</div>
</root>

@code {
	private KeyValuePair<ItemEntry?, int>? previousTooltip;
	private KeyValuePair<ItemEntry?, int>? tooltipData;
	private Panel? holdPanel;

	private string getBorder()
	{
		return (MansionGame.Instance?.CurrentLevel?.Type ?? LevelType.Dungeon) switch
		{
			LevelType.Mansion => "ui/inventory_woods.png",
			LevelType.Dungeon => "ui/inventory_bricks.png",
			LevelType.Bathrooms => "ui/inventory_tiles.png",
			_ => "ui/inventory.png",
		};
	}

	private class LootIcon : Panel
	{
		public LootPrefab LootPrefab { get; set; }

		public override void SetProperty( string name, string value )
		{
			base.SetProperty( name, value );

			if ( name?.ToLower() == "prefab" )
			{
				LootPrefab = LootPrefab.Get( value );
				if ( LootPrefab == null )
					return;

				Style.SetBackgroundImage( LootPrefab.Icon );
				StateHasChanged();
			}
		}

		protected override int BuildHash()
		{
			return HashCode.Combine( LootPrefab, LootPrefab?.Icon );
		}
	}

	private void createHoldPanel( KeyValuePair<ItemEntry?, int> pair )
	{
		deleteHoldPanel();
		holdPanel = AddChild<Panel>( "drag" );

		var prefab = pair.Key.Value.Prefab;
		var rarity = pair.Key.Value.Rarity;

		var icon = holdPanel.AddChild<Panel>( "icon" );
		icon.Style.SetBackgroundImage( prefab.Icon );
	}

	private void deleteHoldPanel()
	{
		holdPanel?.Delete();
		holdPanel = null;
	}

	BrickJam.Player player => Game.LocalPawn as BrickJam.Player;

	public Inventory()
	{
		SetClass( "visible", false );		

		AddEventListener( "onmousedown", ( PanelEvent @event ) =>
		{
			var e = @event as MousePanelEvent;
			if ( !HasClass( "visible" ) || e.MouseButton != MouseButtons.Left || tooltipData == null )
				return;

			createHoldPanel( tooltipData.Value );
		} );

		AddEventListener( "onmouseup", ( PanelEvent @event ) =>
		{
			var e = @event as MousePanelEvent;
			if ( e.MouseButton != MouseButtons.Left )
				return;

			deleteHoldPanel();

			// Are we within inventory bounds?
			if ( Mouse.Position.x >= Box.Left && Mouse.Position.x <= Box.Right
			  && Mouse.Position.y >= Box.Top && Mouse.Position.x <= Box.Bottom ) return;

			// Request to throw item.
			if ( previousTooltip == null )
				return;

			var entry = previousTooltip.Value.Key.Value;
			throwItem( entry.Prefab.ResourceName, entry.Rarity );
		} );
	}

	[ConCmd.Server( "throw_item" )]
	private static void throwItem( string name, LootRarity rarity )
	{
		if ( ConsoleSystem.Caller.Pawn is not BrickJam.Player player )
			return;

		// Let's try to remove the item.
		var prefab = LootPrefab.Get( name );
		if ( prefab == null )
			return;

		var entry = new ItemEntry
		{
			Prefab = prefab,
			Rarity = rarity
		};

		if ( !player.Inventory.Remove( entry ) )
			return;

		var force = 300f;
		var entity = Loot.CreateFromEntry( 
			entry, 
			player.EyePosition, 
			Rotation.FromYaw( player.Rotation.Inverse.Yaw() ) 
		);
		entity.SetupPhysicsFromModel( PhysicsMotionType.Dynamic );
		entity.ApplyAbsoluteImpulse( player.InputRotation.Forward * force );
	}

	public override void Tick()
	{
		if ( Input.Pressed( "Inventory" ) )
		{
			deleteHoldPanel();
			SetClass( "visible", !HasClass( "visible" ) );
		}

		// Fucky workaround :P
		Hud.Instance.Style.PointerEvents = holdPanel == null || !HasClass( "visible" )
			? PointerEvents.None 
			: PointerEvents.All;

		if ( holdPanel != null )
		{
			var fraction = Mouse.Position / Screen.Size;
			holdPanel.Style.Left = (Mouse.Position.x - Box.Rect.Left) * ScaleFromScreen;
			holdPanel.Style.Top = (Mouse.Position.y - Box.Rect.Top) * ScaleFromScreen;
		}
	}

	protected override int BuildHash()
	{
		if ( player?.Inventory?.Loots == null )
			return HashCode.Combine( tooltipData, previousTooltip, getBorder() );

		var joined = String.Join( ' ', player.Inventory.Loots.Select( pair => $"{pair.Key?.Prefab.Name} {pair.Key?.Rarity} x{pair.Value}" ) );
		return HashCode.Combine( tooltipData, previousTooltip, joined, getBorder() );
	}
}

<style>
	Inventory {
        position: absolute;
		transition: transform 0.2s ease-in-out;
		transform: translateY(100%);
		width: 500px;
		height: 500px;
		bottom: 0px;
		left: 0px;
		padding: 20px;
		color: white;

		.title {
			font-size: 64px;
			text-shadow: 4px 4px 0px rgba(black, 0.8);
			top: 25px;
			left: 55px;
		}

		&.visible {
			transform: translateY(0%);
			pointer-events: all;
		}

		.tooltip {
			position: absolute;
			left: 100%;
			bottom: 20px;
			margin-left: 10px;
			transition: transform 0.2s ease-in-out;
			background-color: transparent;
			transform: translateY(200%);
			font-size: 24px;
			text-shadow: 2px 2px 0px rgba(black, 0.8);
			flex-direction: row;
			padding: 10px;
			border-image: url(ui/scroll_border.png) fill;
			border-image-tint: darken(white, 0.35);
			align-items: center;

			.container {
				max-width: 500px;
				flex-direction: column;
				flex-shrink: 0;
			}

			.currency {
				padding-right: 5px; 
				font-size: 16px; 
				top: 3px;
				color: rgba(50, 205, 50, 1);
			}

			.description {
				margin-top: 8px;
				color: rgba(215, 215, 215, 1);
			}

			.icon {
				margin-left: 20px;
				height: 100px;
				aspect-ratio: 1;
				background-size: 100%;
				background-repeat: no-repeat;
				filter: border-wrap(2px black);
				z-index: 2;
			}

			&.visible {
				transform: translateY(0%);
				pointer-events: all;
			}
		}

		.background {
			width: 100%;
			height: 100%;
			background-image: url(ui/inventory.png);
			background-size: 100%;
			image-rendering: pixelated;
		}

		.items {
			position: absolute;
			top: 28%;
			left: 5.5%;
			width: 95%;
			height: 67%;
			flex-direction: row;
			flex-wrap: wrap;

			.item {
				margin-right: 2.6%;
				margin-bottom: 2%;
				width: 16.5%;
				height: 22.5%;
				flex-shrink: 0;
				flex-grow: 0;
				background-color: rgba(black, 0.5);
				text-shadow: 2px 2px 0px rgba(black, 0.8);

				.amount {
					position: absolute;
					bottom: 5px;
					right: 5px;
					font-size: 20px;
					text-stroke: 4px black;
					pointer-events: none;
				}

				.icon {
					position: absolute;
					width: 100%;
					height: 100%;
					background-size: 100%;
					background-position: center;
					background-repeat: no-repeat;
					filter: border-wrap(2px black);
				}

				&:hover {
					background-color: rgba(white, 0.1);
				}
			}
		}
    }

	.drag {
		position: absolute;
		width: 100px;
		aspect-ratio: 1;
		transform: translate(-50%, -50%);
		pointer-events: none;
		border-image: url(ui/scroll_border.png) fill;
		border-image-tint: darken(white, 0.25);
		opacity: 1;
		transition: transform 0.1s linear;
		transform-origin: top left;

		&:intro {
			transform: scale(0) translate(-50%, -50%);
		}

		&:outro {
			transform: scale(0) translate(-50%, -50%);
		}
	
		.icon {
			width: 100%;
			height: 100%;
			background-size: 100%;
			background-position: center;
			background-repeat: no-repeat;
			filter: border-wrap(2px black);
		}
	}
</style>
