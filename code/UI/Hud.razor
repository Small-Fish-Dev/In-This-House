@using Sandbox;
@using Sandbox.UI;

@namespace BrickJam.UI
@inherits RootPanel
@attribute [StyleSheet]

<root>
	@{
		var player = LocalPlayer;

		var isSpectator = Game.LocalPawn is Spectator;
		var isPlayer = Game.LocalPawn is BrickJam.Player;
	}

	<Timer Active="@(MansionGame.Instance.TimerActive)" @Seconds=@( () => (float)MansionGame.Instance.TimeOut )/>

	@if( Game.LocalPawn is BrickJam.Player ply && ply.IsValid )
	{
		<Inventory/>
		<Eventlog/>
	    <Shop/>
	}

	@if (player is not null)
	{
		<!-- The client either has a living pawn or is observing another player's pawn -->
		<StunIndicator @Player=@player/>
		<MoneyCounter @Player=@player/>
		<Interactions @Player=@player/>

		<Crosshair>
			<Top>
				<!--Some text on the top-->
			</Top>
			<Middle>
				X
			</Middle>
			<Bottom>
				<!--Some text on the bottom-->
				@if (isPlayer)
				{
					<InteractionTip @Player=@player/>
				}
			</Bottom>
		</Crosshair>
	}

	<div class="input-hints">
		@if (Game.LocalPawn is Spectator)
		{
			<div class="hint"><inputglyph action="StopFollowing"/>Stop following</div>
			<div class="hint"><inputglyph action="FollowNext"/>Next player</div>
			<div class="hint"><inputglyph action="FollowPrevious"/>Previous player</div>
		}
		else
		{
			<div class="hint"><inputglyph action="inventory"/>Inventory</div>
			<div class="hint"><inputglyph action="chat"/>Chat</div>
		}
	</div>

	<textinput ghost="..." class="chat-input" @ref=ChatInput onsubmit=@(( PanelEvent panelEvent ) => {
		if ( panelEvent.Target is not TextInput input )
			return;

		if ( string.IsNullOrEmpty( input.Text ) || input.Text.Length > 200 )
			Eventlog.Send( "<red>Input length must be greater than 1 and smaller than 200." );
		else
			BrickJam.Player.SendMessage( input.Text );

		input.Text = "";
		input.SetClass( "visible", false );
	}) />

	<SubtitlesList @Pawn=@player />

	<div class="death @(Game.LocalPawn is Spectator ? "visible" : "")">
		<div class="container">
			<span class="title">YOU'RE DEAD!</span>
			@if ( player is not null )
			{
				<span>Observing @(player.Client.Name).</span>
			}
		</div>
	</div>
</root>

@code {
	public TextInput ChatInput { get; private set; }
	public static Hud Instance => (Hud)_instance?.Target;
	private static WeakReference _instance;

	private static BrickJam.Player LocalPlayer => Game.LocalPawn switch
	{
		BrickJam.Player playerAlive => playerAlive,
		Spectator playerSpectator => playerSpectator.Following,
		_ => null
	};

	public Hud()
	{
		Instance?.Delete( true );
		_instance = new WeakReference( this );
	}

	public override void Tick()
	{
		if ( ChatInput == null )
			return;

		if ( Input.Pressed( "chat" ) )
		{
			ChatInput.Focus();
			ChatInput.SetClass( "visible", true );
		}
	}

	protected override int BuildHash()
	{
	// TODO: don't change it to "MansionGame.Instance?" !!! There's something that is calling this func from the menu
		return HashCode.Combine( Game.LocalPawn, LocalPlayer, MansionGame.Instance.TimerActive );
	}

}
