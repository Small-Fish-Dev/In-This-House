@using Sandbox.UI;

@namespace BrickJam.UI
@inherits Panel

<root>
</root>

<style>
	Interactions {
		position: absolute;
		left: 0; top: 0;
		filter: drop-shadow(3px 3px 1px black);
		z-index: 0;
	}
</style>

@code {

	public Player Player { get; set; }

	private readonly List<SingleInteraction> interactionPanels = new();

	public override void Tick()
	{
		base.Tick();

		// Panels that we don't have to remove
		var knownGoodPanels = new List<SingleInteraction>();

		foreach ( var interactionRequest in Player.InteractionRequests )
		{
			var associatedPanel = interactionPanels
				.FirstOrDefault( v => v.Request.Entity == interactionRequest.Entity );
			if ( associatedPanel == null )
			{
				// Create a panel
				associatedPanel = new SingleInteraction( interactionRequest );
				AddChild( associatedPanel );
				interactionPanels.Add( associatedPanel );
			}
			knownGoodPanels.Add( associatedPanel );
		}

		for ( var i = interactionPanels.Count - 1; i >= 0; i-- )
		{
			var panel = interactionPanels[i];
			if ( knownGoodPanels.Contains( panel ) )
				continue;
			panel.ProgressIndicator.Value = 1;
			panel.Delete();
			interactionPanels.RemoveAt( i );
		}
	}

}
