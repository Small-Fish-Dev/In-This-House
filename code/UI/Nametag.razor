@using Sandbox;
@using Sandbox.UI;

@namespace BrickJam.UI
@inherits WorldPanel

<root>
	<div class="container">
		<span>@(Player?.Client?.Name ?? "dead player")</span>
	</div>
</root>

@code {
	private static Dictionary<BrickJam.Player, Nametag> nametags = new();
	public BrickJam.Player Player { get; private set; }
	TimeSince sinceCreation = 0;

	public Nametag()
	{
		// Center our panel :D
		var size = new Vector2( 1500, 500 );
		PanelBounds = new Rect( -size / 2f, size );
	}

	public override void Tick()
	{
		if ( Player == null || !Player.IsValid )
		{
			if ( !IsDeleting )
				Delete();

			return;
		}

		var bounce = 2f * MathF.Sin( sinceCreation );
		var height = (Player.CollisionBounds.Maxs * Player.Rotation).z;
		Position = Player.Position + (height + bounce) * Vector3.Up;
		Rotation = Rotation.LookAt( Camera.Position - Position );

		var dist = Game.LocalPawn?.Position.Distance( Position ) ?? 0;
		var remapped = MathX.Remap( dist, 500, 700, 1, 0 );
		Style.Opacity = remapped;
	}

	[GameEvent.Tick.Client]
	private static void creator()
	{
		var players = Game.Clients
			.Select( x => x.Pawn as BrickJam.Player );

		foreach ( var player in players )
		{
			if ( nametags.TryGetValue( player, out var panel ) || Game.LocalPawn == player )
				continue;

			nametags.Add( player, new Nametag() { 
				Player = player 
			} );
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Player );
	}
}

<style>
	Nametag {
		transition: transform 0.5s ease-in-out;
		justify-content: center;
		align-items: center;

		.container {
			padding: 10px;
			padding-right: 30px;
			padding-left: 30px;
			font-size: 32px;
			align-items: center;
			font-family: "alagard";
			flex-direction: column;
			color: white;
			text-shadow: 3px 3px 0px black;
			background: linear-gradient(to left, rgba(black, 0) 0%, rgba(black, 0.2) 20%, rgba(black, 0.2) 80%, rgba(black, 0) 100%);
		}

		&:outro {
			transform: scale(0);
		}

		&:intro {
			transform: scale(0);
		}
	}
</style>
