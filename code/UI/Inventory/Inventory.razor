@* @using Sandbox.UI;

@namespace ITH.UI
@inherits Panel
@attribute [StyleSheet]

<root>
	<div class="background" style="background-image: url(@getBorder());">
		<label class="title">INVENTORY</label>
		<div class="items">
			@{
				if ( items != null )
					foreach ( var pair in items )
					{
						var item = pair.Key;
						var amount = pair.Value;

						<div class="item"
						@onmouseover=@(() => { 
							tooltipData = pair; 
						})
				 		@onmouseout=@(() => { 
							previousTooltip = tooltipData; 
							tooltipData = null; 
						})
						@onrightclick=@(() => {
							if ( holdPanel != null )
								return;
							
							tooltipData = null;
							previousTooltip = null;
							deleteHoldPanel();
							throwItem( item.Prefab.ResourceName, item.Rarity );
						})>
							<looticon class="icon" prefab="@(item.Prefab.ResourceName)" />
							<label class="amount">x@(amount)</label>
						</div>
					}
			}
		</div>
	</div>

	<div class="tooltip @(tooltipData != null || holdPanel != null ? "visible" : "")">
		@{
			var targetTooltip = tooltipData ?? previousTooltip;
			if ( targetTooltip != null )
			{
				var data = targetTooltip.Value;
				var entry = data.Key;
				var prefab = entry.Prefab;

				<div class="container">
					<div style="flex-direction: row;"> 
						<span style="margin-right: 10px;">@($"{entry.Name}")</span>
						<span style="margin-right: 10px;">x@(data.Value)</span>
					</div>
					<div style="flex-direction: row; margin-top: 5px;"> 
						<span class="currency">$</span><span>@($"{(entry.Price * data.Value):n0}")</span>

						@if( data.Value > 1 )
						{
							<span style="color: rgba(215, 215, 215, 1); margin-left: 10px; padding-right: 5px;">/</span>
							<span class="currency">$</span><span style="color: rgba(215, 215, 215, 1);">@($"{entry.Price:n0}") ea.</span>
						}
					</div>

					@if( prefab.Description != null && prefab.Description != string.Empty )
					{
						<div class="description">@(prefab.Description)</div>
					}
				</div>

				<looticon class="icon" prefab="@(prefab.ResourceName)" />
			}
		}
	</div>
</root>

@code {
	private KeyValuePair<ItemEntry, int>? previousTooltip;
	private KeyValuePair<ItemEntry, int>? tooltipData;
	private Panel? holdPanel;

	private string getBorder()
	{
		return (MansionGame.Instance?.CurrentLevel?.Type ?? LevelType.Dungeon) switch
		{
			LevelType.Mansion => "ui/inventory_woods.png",
			LevelType.Dungeon => "ui/inventory_bricks.png",
			LevelType.Bathrooms => "ui/inventory_tiles.png",
			_ => "ui/inventory.png",
		};
	}

	private class LootIcon : Panel
	{
		public LootPrefab LootPrefab { get; set; }

		public override void SetProperty( string name, string value )
		{
			base.SetProperty( name, value );

			if ( name?.ToLower() == "prefab" )
			{
				LootPrefab = LootPrefab.Get( value );
				if ( LootPrefab == null )
					return;

				Style.SetBackgroundImage( LootPrefab.Icon );
				StateHasChanged();
			}
		}

		protected override int BuildHash()
		{
			return HashCode.Combine( LootPrefab, LootPrefab?.Icon );
		}
	}

	private void createHoldPanel( KeyValuePair<ItemEntry, int> pair )
	{
		deleteHoldPanel();
		holdPanel = AddChild<Panel>( "drag" );

		var prefab = pair.Key.Prefab;
		var rarity = pair.Key.Rarity;

		var icon = holdPanel.AddChild<Panel>( "icon" );
		icon.Style.SetBackgroundImage( prefab.Icon );
	}

	private void deleteHoldPanel()
	{
		holdPanel?.Delete();
		holdPanel = null;
	}

	Player player => Game.LocalPawn as Player;

	public Inventory()
	{
		SetClass( "visible", false );		

		AddEventListener( "onmousedown", ( PanelEvent @event ) =>
		{
			var e = @event as MousePanelEvent;
			if ( !HasClass( "visible" ) || e.MouseButton != MouseButtons.Left || tooltipData == null )
				return;

			createHoldPanel( tooltipData.Value );
		} );

		AddEventListener( "onmouseup", ( PanelEvent @event ) =>
		{
			var e = @event as MousePanelEvent;
			if ( e.MouseButton != MouseButtons.Left )
				return;

			deleteHoldPanel();

			// Are we within inventory bounds?
			if ( Mouse.Position.x >= Box.Left && Mouse.Position.x <= Box.Right
			  && Mouse.Position.y >= Box.Top && Mouse.Position.x <= Box.Bottom ) return;

			// Request to throw item.
			if ( previousTooltip == null )
				return;

			var entry = previousTooltip.Value.Key;
			throwItem( entry.Prefab.ResourceName, entry.Rarity );
		} );
	}

	[ConCmd.Server( "throw_item" )]
	private static void throwItem( string name, LootRarity rarity )
	{
		if ( ConsoleSystem.Caller.Pawn is not BrickJam.Player player )
			return;

		// Let's try to remove the item.
		var prefab = LootPrefab.Get( name );
		if ( prefab == null )
			return;

		var entry = new ItemEntry
		{
			Prefab = prefab,
			Rarity = rarity
		};

		if ( !player.Inventory.Remove( entry ) )
			return;

		var force = 300f;
		var entity = Loot.CreateFromEntry( 
			entry, 
			player.EyePosition, 
			Rotation.FromYaw( player.Rotation.Yaw() ) 
		);
		entity.LastPlayer = player;
		entity.SetupPhysicsFromModel( PhysicsMotionType.Dynamic );
		entity.ApplyAbsoluteImpulse( player.InputRotation.Forward * force );
		entity.Scale = 0.01f;

		Eventlog.Send( $"You threw 1x <gray>{entry.Name}.", To.Single( player ) );
	}

	public override void Tick()
	{
		if ( Input.Pressed( "Inventory" ) )
		{
			Shop.Close();
			deleteHoldPanel();
			SetClass( "visible", !HasClass( "visible" ) );
		}

		// Fucky workaround :P
		Hud.Instance.Style.PointerEvents = holdPanel == null || !HasClass( "visible" )
			? PointerEvents.None 
			: PointerEvents.All;

		if ( holdPanel != null )
		{
			var fraction = Mouse.Position / Screen.Size;
			holdPanel.Style.Left = (Mouse.Position.x - Box.Rect.Left) * ScaleFromScreen;
			holdPanel.Style.Top = (Mouse.Position.y - Box.Rect.Top) * ScaleFromScreen;
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( tooltipData, previousTooltip, getBorder() );
	}

	private Dictionary<ItemEntry, int> items;

	[Event( "InventoryChanged" )]
	void updated( IClient cl, ItemEntry entry, int count )
	{
		if ( Game.IsServer || cl != Game.LocalClient )
			return;

		items = player?.Inventory?.Loots?
			.OrderByDescending( x => x.Key?.Price ?? 0 )
			.ToDictionary( k => k.Key.Value, v => v.Value );

		StateHasChanged();
	}
} *@
