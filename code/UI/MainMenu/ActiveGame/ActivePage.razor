@using System
@using Sandbox;
@using Sandbox.UI;
@using System.Linq;
@inherits Panel
@namespace BrickJam.UI.MainMenu.ActiveGame
@attribute [StyleSheet]

@if ( !Game.InGame )
{
	<div>No game. Error. We shouldn't be here.</div>
	return;
}

<root>

	<div class="navbar">
		<div class="left">
			<a class="button" href="/"> Home </a>
			<span class="block">&gt;</span>
			<span class="block">Current Game</span>
		</div>
		<div class="right">
			@Game.Server.MaxPlayers
		</div>
	</div>

	<section class="inset">

		@* <h2>Current Players (@Game.Clients.Count / @Game.Server.MaxPlayers)</h2> *@

		<PlayerSlots/>

	</section>

	<div class="navbar">

		<div class="left">
			<span class="button" onclick=@( () => Game.Menu.LeaveServer( "Leaving" ) )>Leave Server</span>
		</div>

		<div class="right">

			<span class="button primary" onclick=@ReturnToGame>Return To Game</span>
		</div>

	</div>

</root>

@code
{
	private bool IsMenuVisible { get; set; }

	protected override void OnParametersSet()
	{
	/*ShowMapOption = Game.Menu.Package.MapSelectionMode != Sandbox.DataModel.Game.MapSelect.Hidden;
        ShowMapOption = ShowMapOption && Game.Menu.Package.MapSelectionMode != Sandbox.DataModel.Game.MapSelect.Empty;*/
	}

	public void ReturnToGame()
	{
		Game.Menu.HideMenu();
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Game.Clients.Count, Game.Server.MapIdent, IsVisible );
	}

	[GameEvent.Client.Frame]
	private void Frame()
	{
		IsMenuVisible = IsVisible;
		Log.Info( $"{IsMenuVisible}" );
	}

	public override void Tick()
	{
		base.Tick();

		if ( !IsVisible )
			return;

		if ( !Game.InGame )
		{
			this.Navigate( "/" );
		}
	}
}
