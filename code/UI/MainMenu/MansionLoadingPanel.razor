@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Menu;
@attribute [StyleSheet]
@inherits RootPanel
@namespace BrickJam.UI.MainMenu
@implements Sandbox.Menu.ILoadingScreenPanel

<root class="loadingpanel">

	<div class="loading-background-container">
		<div class="loading-background" style="background-image: url('@backgrounds[_loadingBackground1]')">
			<div class="tip">@LoadingTip1String</div>
		</div>
		<div class="loading-background" style="background-image: url('@backgrounds[_loadingBackground2]'); opacity: @(_isLoadingTip1 ? 0 : 1)">
			<div class="tip">@LoadingTip2String</div>
		</div>
	</div>
	
	<div class="bottom">
		<div class="title">LOADING</div>

		<div class="loading">
			<div class="subtitle">@Progress.Title</div>

			@* Testing:
			@{
				Progress.Fraction = 0.8;
			}
			*@

			@if ( Progress.Fraction > 0 )
			{
				<div class="progress">
					<div class="bar" style="width: @( Progress.Percent )%;"></div>
					<div class="text-left">@( Progress.Percent.ToString( "0" ) )%</div>
					<div class="text-right">
						<span>@( Progress.Mbps.ToString( "0" ) )</span><span class="unit">Mbps</span>
					</div>
				</div>
			}
		</div>

		<div class="controls">
			<div class="button" onclick="@Game.Menu.CancelLoading">
				Cancel
			</div>
		</div>
	</div>

</root>

@code
{
	// WARNING: restart the s&box to see your new tips!
	private static readonly string[] loadingTips =
	{
		"Do not die to win.",
		"None of you are going to heaven.",
		"I think I sharted.",
		"If you do drugs, you go to hell before you die.",
		"🚬🐖💨",
		"Stealing stuff is bad. Unless it's in an abandoned mansion.",
		"You can invite up to three friends to your game, 4 times the thieves = 4 times the fun! Four Thieves, hmm...",
		"Backrooms, o-O-o-O-o-o! 👻👻👻"
	};

	// WARNING: restart the s&box to see your new backgrounds!
	private static readonly string[] backgrounds =
	{
		"/ui/bricks.png",
		"/ui/bricks2.png",
		"/ui/bricks3.png"
	};

	public LoadingProgress Progress;

	private bool _isLoadingTip1 = true;

	private int _loadingBackground1;
	private int _loadingTip1;
	private string LoadingTip1String => $"TIP: {loadingTips[_loadingTip1]}";
	
	private int _loadingBackground2;
	private int _loadingTip2;
	private string LoadingTip2String => $"TIP: {loadingTips[_loadingTip2]}";
	
	private Random _random = new();

	private TimeSince _lastBackground = 0;
	private float TimePerBackground => 15;

	public MansionLoadingPanel()
	{
		_loadingTip1 = _random.Next( loadingTips.Length );
		_loadingBackground1 = _random.Next( backgrounds.Length );
	}

	private int SafeRandom( int value, int max )
	{
		var output = _random.Next( max - 1 );
		if ( output >= value )
			output++;

		return output;
	}

	private void SwitchBackgrounds()
	{
		if ( _isLoadingTip1 )
		{
			_loadingTip2 = SafeRandom( _loadingTip1, loadingTips.Length );
			_loadingBackground2 = SafeRandom( _loadingBackground1, backgrounds.Length );
		}
		else
		{
			_loadingTip1 = SafeRandom( _loadingTip2, loadingTips.Length );
			_loadingBackground1 = SafeRandom( _loadingBackground2, backgrounds.Length );
		}

		_isLoadingTip1 = !_isLoadingTip1;
		StateHasChanged();
	}
	
	public void OnLoadingProgress( LoadingProgress progress )
	{
		Progress = progress;
		StateHasChanged();
	}

	public override void Tick()
	{
		base.Tick();

		if ( _lastBackground >= TimePerBackground )
		{
			_lastBackground = 0;
			SwitchBackgrounds();
		}
	}
}
