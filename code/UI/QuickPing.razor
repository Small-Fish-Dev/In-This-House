@using Sandbox.UI;

@namespace BrickJam.UI
@inherits Panel

<root>
	<div class="icon @(Type.ToString().ToLower())" />
	<div class="container">
		@if( Type != PingType.Other )
		{
			<span class="@(Type.ToString().ToLower()) type">@(Type.ToString().ToUpper()</span>
		}
		<span>@(From?.Client?.Name ?? "unknown")</span>
		<label class="distance" @ref=distanceLabel />
	</div>
</root>

@code {
	public const float TIME = 10f;
	public const float INCH_TO_METER = 0.0254f;

	public enum PingType
	{
		Enemy,
		Exit,
		Loot,
		Other
	}

	private static Dictionary<Player, QuickPing> pings = new();

	public Player From { get; private set; }
	public Entity Target { get; private set; }
	public Vector3 Position { get; private set; }
	public PingType Type { get; private set; }
	public Color Color { get; private set; }

	TimeSince sinceCreation = 0;
	Label distanceLabel;
	bool toggleOff = true;

	protected QuickPing( PingType type, Player from, Entity target, Vector3 position, Color color )
	{
		if ( pings.TryGetValue( from, out var old ) )
		{
			if ( old.Target == target )
				old.toggleOff = false;

			old.Delete();
			pings.Remove( from );
		}

		foreach ( var pair in pings.Where( p => p.Value.Target == target && p.Key != from ) )
		{
			var ping = pair.Value;
			ping.toggleOff = false;
			ping.Delete();
			pings.Remove( pair.Key );
		}

		Type = type;
		From = from;
		Target = target;
		Position = position;
		Color = color;
		SetGlow( true );

		pings.Add( from, this );
	}

	public void SetGlow( bool enabled )
	{
		if ( !Target.IsValid() )
			return;

		if ( !enabled )
		{
			if ( !Target.Components.TryGet<Sandbox.Component.Glow>( out var component ) )
				return;

			component.Enabled = false;

			return;
		}

		var glow = Target.Components.GetOrCreate<Sandbox.Component.Glow>();
		glow.Enabled = true;
		glow.Color = Color;
		glow.ObscuredColor = Color;
		glow.Width = 0.5f;
	}

	public override void Tick()
	{
		if ( sinceCreation >= TIME )
		{
			if ( !IsDeleting )
			{
				pings.Remove( From );
				Delete();
			}

			return;
		}

		var worldPosition = Position + (Target.IsValid() ? Target.Position : 0f);
		var dist = Camera.Position.Distance( worldPosition );
		if ( distanceLabel != null )
			distanceLabel.Text = $"{MathF.Floor( dist * INCH_TO_METER ):n0}m";

		var targetRoll = 2f * MathF.Sin( sinceCreation * 1.5f );
		var scale = MathX.Remap( dist, 200, 2000, 1f, 0.75f, true );
		var fract = Length.Fraction( -0.5f );
		var transform = new PanelTransform();
		transform.AddTranslate( fract, fract );
		transform.AddRotation( 0f, 0f, MathF.Floor( targetRoll * 2f + 0.5f ) / 2f );
		transform.AddScale( scale );
		Style.Transform = transform;

		var bounce = 4f * MathF.Sin( sinceCreation );
		var pos = worldPosition.ToScreen();
		Style.Left = Length.Fraction( pos.x );
		Style.Top = Length.Fraction( pos.y + bounce / Screen.Height);

		var opacity = MathX.Remap( dist, 200, 500, 0.1f, 1, true );
		Style.Opacity = opacity;
	}

	public override void OnDeleted()
	{
		base.OnDeleted();

		if ( toggleOff )
			SetGlow( false );
	}

	[ClientRpc]
	public static void CreateOnClient( PingType type, int fromIdent, Vector3 position, int targetIdent, Color color )
	{
		if ( Entity.FindByIndex( fromIdent ) is not Player from || !from.IsValid() )
			return;

		var target = targetIdent == -1
			? null
			: Entity.FindByIndex( targetIdent );

		var ping = new QuickPing( type, from, target, position, color );
		Hud.Instance?.AddChild( ping );

		var pos = (position + (target.IsValid() ? target.Position : 0f)).ToScreen();
		Sound.FromScreen( "ping", pos.x, pos.y );
	}

	[ConCmd.Server]
	public static void RequestPing( PingType type, Vector3 position, int targetIdent, Color color )
	{
		if ( ConsoleSystem.Caller.Pawn is not Player pawn )
			return;

		CreateOnClient( To.Everyone, type, pawn.NetworkIdent, position, targetIdent, color );
	}

	[GameEvent.Tick.Client]
	private static void creator()
	{
		if ( Game.LocalPawn is not Player pawn )
			return;

		if ( Input.Pressed( "ping" ) )
		{
			var ray = new Ray( pawn.EyePosition, pawn.InputAngles.Forward );
			var tr = Trace.Ray( ray, 1000f )
				.Ignore( pawn )
				.WithAnyTags( "door", "npc", "solid", "loot" )
				.WithoutTags( "doob" )
				.Size( 10f )
				.Run();

			(Entity target, PingType type, Vector3 position, Color color) tuple = tr.Entity switch
			{
				NPC npc => (npc, PingType.Enemy, (npc.CollisionBounds.Maxs.z + 10f) * Vector3.Up, Color.Red),
				Trapdoor trapdoor => (trapdoor, PingType.Exit, 20f * Vector3.Up, new Color32( 30, 10, 5 )),
				Loot loot => (loot, PingType.Loot, loot.CollisionBounds.Maxs.z / 2f * Vector3.Up, new Color32( 20, 175, 20 )),
				LootContainer container => (container, PingType.Loot, container.CollisionBounds.Maxs.z / 2f * Vector3.Up, new Color32( 20, 175, 20 )),
				_ => (null, PingType.Other, tr.EndPosition, Color.White)
			};

			RequestPing( tuple.type, tuple.position, tuple.target?.NetworkIdent ?? -1, tuple.color );
		}
	}
}

<style>
	QuickPing {
		position: absolute;
		z-index: -1;
		transform: translate(-50% -50%);
		flex-direction: column;
		align-items: center;
		//transition: opacity 0.5s ease-in-out;
		opacity: 1;

		.container {
			padding: 5px;
			padding-right: 30px;
			padding-left: 30px;
			white-space: nowrap;
			font-size: 18px;
			align-items: center;
			flex-direction: column;
			color: white;
			text-shadow: 2px 2px 0px black;
			background: linear-gradient(to left, rgba(black, 0) 0%, rgba(black, 0.5) 20%, rgba(black, 0.5) 80%, rgba(black, 0) 100%);

			.distance {
				color: rgba(215, 215, 215, 1);
				font-size: 16px;
			}
		}

		.icon {
			width: 32px;
			aspect-ratio: 1;
			background-size: 100%;
			background-repeat: no-repeat;
			background-position: center;
			image-rendering: point;
			filter: drop-shadow(2px 2px 1px black);
			margin-bottom: 5px;
			background-image: url(ui/pings/warning.png);
		}

		.enemy {
			background-image-tint: red;
			color: red;
		}

		.exit {
			background-image-tint: rgba(190, 120, 70, 1);
			background-image: url(ui/pings/exit.png);
			color: rgba(190, 120, 70, 1);
		}

		.loot {
			background-image-tint: rgba(70, 225, 70, 1);
			background-image: url(ui/pings/loot.png);
			color: rgba(70, 225, 70, 1);
		}

		.type {
			background-image: none;
			text-shadow: 2px 2px 0px black;
			font-size: 18px;
		}

		&:intro {
		}

		&:outro {
		}
	}
</style>
