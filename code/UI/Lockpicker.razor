@using Sandbox;
@using Sandbox.UI;

@namespace BrickJam.UI
@inherits Panel

<root>
	<div class="title">
		<span>Move your mouse to rotate around the key hole.</span>
		<div style="flex-direction: row; padding: 5px;">
			<span>Hold down </span><inputglyph action="attack1" /> <span>to pick the lock.</span>
		</div>
		<div style="flex-direction: row;">
			<span>Press </span><inputglyph action="attack2" /> <span>to exit.</span>
		</div>
	</div>
</root>

@code {
    // Valid range for our lockpicking.
    public const float RANGE = 20f;

    public static bool Active => instance != null && !instance.IsDeleting && instance.IsValid && instance.IsVisible;
    public LockedComponent Component { get; }
    public float CorrectAngle { get; }

    private static Lockpicker instance;

    // Don't actually use this..
    public Lockpicker() : this( null ) { }

    public Lockpicker( LockedComponent component )
    {
        instance?.Delete( true );
        instance = this;

        Component = component;
        CorrectAngle = Game.Random.Float( 0f, 360f );
    }

    public override void OnButtonEvent( ButtonEvent e )
    {
        base.OnButtonEvent( e );

        if ( e.Button == "mouseright" && !IsDeleting )
            Delete();

        if ( e.Button == "mouseleft" )
        {
            down = e.Pressed;

            if (e.Pressed)
                makeSound(mouseAngle < CorrectAngle - RANGE && mouseAngle > CorrectAngle + RANGE);
        }
    }

    [ConCmd.Server]
    static void makeSound( bool fail )
    {
        var pawn = ConsoleSystem.Caller.Pawn;

        if (pawn == null) return;

        if ( fail )
            Sound.FromWorld("sounds/lockpicking/lock_fail.sound", pawn.Position + pawn.Rotation.Forward * 30f + Vector3.Up * 30f);
        else
            Sound.FromWorld("sounds/lockpicking/lock_success.sound", pawn.Position + pawn.Rotation.Forward * 30f + Vector3.Up * 30f);
    }

	public static void Open( LockedComponent component )
	{
		var panel = new Lockpicker( component );
		Hud.Instance.AddChild( panel );
	}

	SceneObject wrench;
	SceneObject pick;

	SceneModel padlock;
	SceneCamera camera => panel.Camera;
	ScenePanel panel;

	Transform targetTransform => new Transform( Vector3.Down * 3.5f, Rotation.From( 60, 0, 0 ) );

	bool down = false;
	bool solved = false;
	float rotation = 0f;
	float mouseAngle = 0;

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		if ( !firstTime )
			return;

		// Initialize our scene.
		var world = new SceneWorld()
		{
			AmbientLightColor = Color.White,
		};

		_ = new SceneLight( world, Vector3.Up * 15f + Vector3.Backward * 5f, 50f, Color.White * 0.2f );
		_ = new SceneLight( world, Vector3.Up * 25f + Vector3.Forward * 10f, 50f, Color.White * 0.2f );
		_ = new SceneLight( world, Vector3.Backward * 5f + Vector3.Down *35f, 50f, Color.White * 0.05f );

		var transform = new Transform( Vector3.Down * 3.5f, Rotation.From( 0, 0, 0 ) );
		padlock = new SceneModel( world, "models/items/lock/lock.vmdl", transform );
		wrench = new SceneObject( world, "models/items/wrench/wrench.vmdl", Transform.Zero );
		pick = new SceneObject( world, "models/items/pick/pick.vmdl", Transform.Zero );

		panel = new ScenePanel();
		panel.AddClass( "scene" );

		camera.World = world;
		camera.Size = 1500;
		camera.FieldOfView = 60f;
		camera.ZFar = 1000;
		camera.ZNear = 5f;
		AddChild( panel );
	}

	private async void solvedAsync()
	{
		solved = true;
		padlock.SetAnimParameter( "unlocked", true );
		Component?.RequestLockpicked();

		await GameTask.Delay( 500 );
		Delete();
	}

	public override void Tick()
	{
		if ( Component == null 
		  || Component.Entity == null 
		  || !Component.Locked )
		{
			if ( !IsDeleting )
				Delete();

			return;
		}

		if ( camera == null || padlock == null )
			return;

		// Input stuff..
		var rect = panel.Box.Rect;
		var hole = padlock.GetAttachment( "hole" ) ?? Transform.Zero;
		var pivot = camera.ToScreen( hole.Position );
		var center = pivot - panel.MousePosition;

		var targetRotation = down 
			? MathX.Clamp( 90f, 0f, 90f - 90f * MathF.Abs( mouseAngle - CorrectAngle ) / 360f ) 
			: 0;
		rotation = MathX.Lerp( rotation, targetRotation, 10f * Time.Delta );
		mouseAngle = down 
			? mouseAngle 
			: (MathF.Atan2( center.y, center.x ) * (180f / MathF.PI) + 270f) % 360;

		// Check if we've succesfully lockpicked!
		if ( !solved && down
		  && rotation.AlmostEqual( 90f, RANGE )
		  && mouseAngle >= CorrectAngle - RANGE && mouseAngle <= CorrectAngle + RANGE )
			solvedAsync();

		// Camera stuff..
		camera.Position = Vector3.Backward * 40f;
		camera.Rotation = Rotation.From( 0, 0, 0 );

		// Wrench stuff..
		var wTransform = new Transform( 
			hole.Position + padlock.Rotation.Up * 1.2f + padlock.Rotation.Forward * 0.4f, 
			hole.Rotation
				.RotateAroundAxis( Vector3.Up, 40f )
				.RotateAroundAxis( Vector3.Forward, -90 )
		);
		wrench.Transform = wTransform;

		// Lockpick stuff..
		var lTransform = new Transform( 
			hole.Position + padlock.Rotation.Up * 1.2f + padlock.Rotation.Backward * 0.2f, 
			hole.Rotation
				.RotateAroundAxis( Vector3.Up, 90f )
				.RotateAroundAxis( Vector3.Forward, 45f )
				.RotateAroundAxis( Vector3.Up + Vector3.Left, mouseAngle ) // order
		);
		pick.Transform = lTransform;

		// Padlock stuff..
		padlock.Transform = Transform.Lerp( padlock.Transform, targetTransform, 2f * Time.Delta, true );
		padlock.SetAnimParameter( "rotate", rotation );
		padlock.Update( Time.Delta );
	}
}

<style>
	Lockpicker {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
		justify-content: center;
		align-items: center;
		pointer-events: all;	
		background-color: rgba(white, 0.05);
		backdrop-filter: blur(4px);
		transition: opacity 0.5s ease-in-out;
		z-index: 2;
		opacity: 1;

		.title {
			position: absolute;
			top: 200px;
			color: white;
			font-size: 32px;
			flex-direction: column;
			align-items: center;
			text-shadow: 3px 3px 0px black;
			
			InputGlyph {
				width: 32;
				aspect-ratio: 1;
				margin-left: 5px;
				margin-right: 5px;
			}
		}

		&:outro {
			opacity: 0;
			pointer-events: none;
		}

		&:intro {
			opacity: 0;
		}

		.scene {
            width: 100%;
            height: 100%;
			background-size: 100%;
			background-repeat: no-repeat;
			background-position: center;
			pointer-events: none;
			filter: border-wrap(2px black);
		}
    }
</style>
