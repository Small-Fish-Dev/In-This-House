@using Sandbox;
@using Sandbox.UI;

@namespace BrickJam.UI
@inherits Panel

<style>
	Lockpicker {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
		justify-content: center;
		align-items: center;

		.scene {
			width: 700px;
			height: 700px;
			background-size: 100%;
			background-repeat: no-repeat;
			background-position: center;
			background-color: rgba(black, 0.2);
		}
    }
</style>

<root>
</root>

@code {
	SceneModel padlock;
	SceneCamera camera => panel.Camera;
	ScenePanel panel;

	TimeSince opened;
	Transform targetTransform => new Transform( Vector3.Down * 3.5f, Rotation.From( 60, 0, 0 ) );
	float rotation = 0f;

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		if ( !firstTime )
			return;

		// Initialize our scene.
		var world = new SceneWorld()
		{
			AmbientLightColor = Color.White,
		};

		_ = new SceneLight( world, Vector3.Up * 15f + Vector3.Backward * 5f, 50f, Color.White * 0.2f );
		_ = new SceneLight( world, Vector3.Up * 25f + Vector3.Forward * 10f, 50f, Color.White * 0.2f );
		_ = new SceneLight( world, Vector3.Backward * 5f + Vector3.Down *35f, 50f, Color.White * 0.05f );

		var transform = new Transform( Vector3.Down * 3.5f, Rotation.From( 0, 0, 0 ) );
		padlock = new SceneModel( world, "models/items/lock/lock.vmdl", transform );
		panel = new ScenePanel();
		panel.AddClass( "scene" );

		camera.World = world;
		camera.Size = 512;
		camera.FieldOfView = 60f;
		camera.ZFar = 1000;
		camera.ZNear = 5f;
		opened = 0;
		AddChild( panel );
	}

	public override void Tick()
	{
		if ( camera == null || padlock == null )
			return;

		// Camera stuff..
		camera.Position = Vector3.Backward * 10f;
		camera.Rotation = Rotation.From( 0, 0, 0 );

		// Padlock stuff..
		padlock.Transform = Transform.Lerp( padlock.Transform, targetTransform, 2f * Time.Delta, true );
		padlock.Update( Time.Delta );

		var index = 2;
		var transform = padlock.GetBoneWorldTransform( index );
		rotation = MathF.Abs( 90f * MathF.Sin( Time.Now * 2f ));
	}
}
